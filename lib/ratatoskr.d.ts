// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../events
//   ../ws

import { EventEmitter } from 'events';
import * as WebSocket from 'ws';

export enum ConnectionStatus {
    Disconnected = 0,
    Connecting = 1,
    Connected = 2,
    Authenticated = 3,
}
export interface ConnectionOptions {
    endpoint?: string;
    authorization?: string | AuthorizationFunc;
    resource?: string;
    agent?: string;
    timeout?: number;
    extensions?: any[];
}
export interface PendingAckContext {
    id: string;
    ok: (data: any) => void;
    error: (err: any) => void;
}
export interface AuthorizationFunc {
    (): string;
}
export interface Extension {
    init(client: Client): any;
}
export interface ExtensionAsFunc {
    (client: Client): void;
}
export enum MessageSendErrorCause {
    NoConnection = 0,
    NoAuth = 1,
    NoAck = 2,
    Serialization = 3,
    Transport = 4,
    Promise = 5,
}
export class MessageSendError extends Error {
    data: Outbound;
    cause: MessageSendErrorCause;
    source: any;
    constructor(message: string, cause: MessageSendErrorCause, source?: any, data?: Outbound);
}
export class Client extends EventEmitter {
    status: ConnectionStatus;
    resource: string;
    agent: string;
    endpoint: string;
    authorization: string | AuthorizationFunc;
    timeout: number;
    protected _socket: WebSocket;
    protected _needsAck: {
        [id: string]: PendingAckContext;
    };
    constructor({ endpoint, authorization, timeout, resource, agent, extensions }?: ConnectionOptions);
    use(ext: Extension): any;
    use(ext: ExtensionAsFunc): any;
    nextId(): string;
    connect(): void;
    disconnect(reason?: any): void;
    protected _wsDisconnect(socket: WebSocket, reason?: any): void;
    protected _wsBind(socket: WebSocket): void;
    protected _wsInboundError(message: Error): void;
    protected _wsInboundAck(message: Ack): void;
    protected _wsInboundOther(message: Other): void;
    protected _wsMessage(evt: any): void;
    protected _wsError(evt: any): void;
    protected _wsClose(evt: any): void;
    protected _wsSend(message: Outbound, timeout?: number): Promise<Ack>;
    send(message: Outbound): Promise<Ack>;
    _ensureCanAck(ack: boolean, message: Outbound): Outbound;
    sendPing(message?: Ping, ack?: boolean): Promise<Ack>;
    sendChat(message: Chat, ack?: boolean): Promise<Ack>;
    sendPresenceChange(message: PresenceChange, ack?: boolean): Promise<Ack>;
    sendVoiceChange(message: VoiceChange, ack?: boolean): Promise<Ack>;
    sendUserTyping(message: UserTyping, ack?: boolean): Promise<Ack>;
    sendTeamJoin(message: TeamJoin, ack?: boolean): Promise<Ack>;
    sendTeamLeave(message: TeamLeave, ack?: boolean): Promise<Ack>;
}

export interface ResumeOptions {
    ping?: number;
    retry?: number;
    steps?: Array<number>;
    jitter?: number;
}
export function resume({ ping, retry, steps, jitter }?: ResumeOptions): (client: Client) => void;

export interface PresenceBatchOptions {
    timeout?: number;
}
export function presenceBatch({ timeout }?: PresenceBatchOptions): (client: Client) => void;

export interface VoiceBatchOptions {
    timeout?: number;
}
export function voiceBatch({ timeout }?: VoiceBatchOptions): (client: Client) => void;

export interface Ack {
    type: 'ack';
    id?: string;
    reply_to: string;
    reply_type: string;
    response?: any;
    error?: any;
}
export interface Error {
    type: 'error';
    id?: string;
    code: string;
    text: string;
    data?: any;
}
export interface Other {
    type: string;
    id?: string;
}
export interface Auth {
    type: 'auth';
    id?: string;
    authorization: string;
    resource?: string;
    agent?: string;
}
export interface Chat {
    type: 'chat';
    id?: string;
    to: string;
    from?: string;
    text: string;
    extras?: any;
}
export const PRESENCE_UNKNOWN = "unknown";
export const PRESENCE_INACTIVE = "inactive";
export const PRESENCE_ACTIVE = "active";
export const PRESENCE_UNAVAILABLE = "unavailable";
export const PRESENCE_AWAY = "away";
export const PRESENCE_AVAILABLE = "awailable";
export const PRESENCE_DND = "dnd";
export type PresenceType = typeof PRESENCE_UNKNOWN | typeof PRESENCE_INACTIVE | typeof PRESENCE_ACTIVE | typeof PRESENCE_UNAVAILABLE | typeof PRESENCE_AWAY | typeof PRESENCE_AVAILABLE | typeof PRESENCE_DND;
export const PresenceTypes: {
    [type: string]: PresenceType;
};
export const PRESENCE_CLIENT_OTHER = "other";
export const PRESENCE_CLIENT_WEB = "web";
export const PRESENCE_CLIENT_PHONE = "phone";
export type PresenceClientType = typeof PRESENCE_CLIENT_OTHER | typeof PRESENCE_CLIENT_WEB | typeof PRESENCE_CLIENT_PHONE;
export const PresenceClientTypes: {
    [client: string]: PresenceClientType;
};
export interface PresenceChange {
    type: 'presence_change';
    id?: string;
    to: string;
    from?: string;
    presence: PresenceType;
    message?: string;
    client?: PresenceClientType;
}
export interface VoiceChange {
    type: 'voice_change';
    id?: string;
    to: string;
    from?: string;
    voice: string;
}
export interface UserTyping {
    type: 'user_typing';
    id?: string;
    to: string;
    from?: string;
}
export interface Ping {
    type: 'ping';
    id?: string;
}
export interface TeamJoin {
    type: 'team_join';
    id?: string;
    to: string;
}
export interface TeamLeave {
    type: 'team_leave';
    id?: string;
    to: string;
}
export type Outbound = Auth | Chat | PresenceChange | VoiceChange | UserTyping | Ping | TeamJoin | TeamLeave | Other;
export type Inbound = Ack | Error | Other;

